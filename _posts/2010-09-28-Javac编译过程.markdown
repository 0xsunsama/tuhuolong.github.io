---
layout: post
title: "Javac编译过程"
date: 2010-09-28 12:38:00 
comments: true
categories: [java]
tags: [java]
description: "Javac编译过程"
keywords: java
---


 
 
 
 
 
  
   1.词法/语法分析,输入符号表
  
 
 
  (1)词法分析   ---->;
  
   Token序列
  
 
 
  (2)语法分析   ---->;
  
   抽象语法树
  
 
 
  (3)输入符号表---->;
  
   符号表
  
 
 
  每个编译单元的抽象诧法树的顶层节点都先被放到待处理列表中
  
            逐个处理列表中的节点
 
 
  所有类符号被输入到外围作用域的符号表中
  
  若找到package-info.java，将其顶层树节点加入到待处理列表中
  
            确定类的参数（对泛型类型而言）、超类型和接口
  
            根据需要添加默认构造方法
  
            将类中出现的符号输入到类自身的符号表中
  
  
 
 
  
   2.注解处理
  
 
 
 
 
  
   3.语义分析(抽象语法树)
  
 
 
  (1)属性标注和检查(Attr和Check)
 
 
  将语法树中名字、表达式等元素不变量、方法、类型等联系到一起
  
            检查变量使用前是否已声明
  
            推导泛型方法的类型参数
  
            检查类型匹配性
  
            进行常量折叠
 
 
  (2)数据流分析(Flow)
 
 
  检查所有语句都可到达
  
            检查所有checked exception都被捕获戒抛出
  
            检查变量的确定性赋值
  
  ◦所有局部变量在使用前必项确定性赋值
  
  ◦有迒回值的方法必项确定性迒回值
  
            检查变量的确定性丌重复赋值
  
  ◦为保证final的语义
 
 
  (3)类型转换(TransType):将泛型转换为裸类型RawType
 
 
  将泛型Java转换为普通Java, 插入必要的类型转换代码
 
 
  (4)解除语法糖(Lower)
 
 
  削除if (false) { … }形式的无用代码
  
            满足下述所有条件的代码被讣为是条件编译的无用代码
  
  ◦if语句的条件表达式是Java语言规范定义的常量表达式
  
  ◦并且常量表达式值为false则then块为无用代码；反之则else块为无用代码
  
            将含有语法糖的语法树改写为含有简单语法结构的语法树
  
  ◦具名内部类/匿名内部类/类字面量
  
  ◦断言（assertion）
  
  ◦自动装箱/拆箱
  
  ◦foreach循环
  
  ◦enum类型的switch
  
  ◦String类型的switch（Java 7）
  
  ◦etc …
 
 
  
   4.产生.class文件
  
 
 
  将实例成员初始化器收集到构造器中成为<init>;()
  
   将静态成员初始化器收集为<clinit>;()
  
   从抽象语法树生成字节码
  
  ◦后序遍历语法树
  
  ◦迕行最后的少量代码转换
  
                   String的+被生成为StringBuilder操作
  
                   x++/x--在条件允许时被优化为++x/--x
  
                   etc …
  
   从符号表生成Class文件
  
  ◦生成Class文件的结构信息
  
  ◦生成元数据（包括常量池）
 
 
 



---
layout: post
title: "android 屏幕适配"
date: 2012-08-27 17:06:00 
comments: true
categories: [android]
tags: [android]
description: "android 屏幕适配"
keywords: android
---


 
  
   
    如何将一个应用程序适配在不同的手机上，虽然这不算是一个技术问题，但是对于刚刚做屏幕的开发人员来说，还真不是一件多么简单的事情。
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    首先：你需要在
   
   
    AndroidManifest.xml
   
   
    文件的
   
   
    <manifest>;
   
   
    元素如下添加子元素
   
  
 
 
  
   
    <
   
   
    supports-screens
   
   
    
     android:largeScreens
    
    
     =
    
    
     
      "true"
     
    
   
  
 
 
  
   
    
     
      
       
        
         
          
          
         
        
       
      
     
    
    
     android:normalScreens
    
    
     =
    
    
     
      "true"
     
    
    
     android:anyDensity
    
    
     =
    
    
     
      "true"
     
    
   
  
 
 
  
   
    
     
      
       
        
         
          
          
         
        
       
      
     
    
    
     android:smallScreens
    
    
     =
    
    
     
      "true"
     
    
    
     >;</
    
    
     supports-screens
    
    
     >;
    
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    
     
      
       名如其意，以上是为我们的屏幕设置多分辨率支持（更准确的说是适配大、中、小三种密度）。
      
     
    
   
   
    android:anyDensity
   
   
    =
   
   
    
     "true"
    
    
     ，
    
   
   
    这一句对整个的屏幕都起着十分重要的作用，值为
   
   
    true
   
   
    ，我们的应用程序当安装在不同密度的手机上时，程序会分别加载
   
   
    hdpi,mdpi,ldpi
   
   
    文件夹中的资源。
   
  
 
 
  
   
    
     相反，如果值设置为
    
   
   
    false
   
   
    ，即使我们在
   
   
    hdpi,mdpi,ldpi
   
   
    文件夹下拥有同一种资源，那么
    
     
      应用
     
    
    也不会自动地去相应文件夹下寻找资源，这种情况都是出现在高密度，以及低密度的手机上，比如说一部
   
   
    240
   
   
    ×
   
   
    320
   
   
    像素的手机，如果设置
   
   
    android:anyDensity
   
   
    =
   
   
    
     "false"
    
    
     ，
    
   
   
    Android
   
   
    系统会将
   
   
    240
 x 320(
   
   
    低密度
   
   
    )
   
   
    转换为
   
   
    320
   
   
    ×
   
   
    480(
   
   
    中密度
   
   
    )
   
   
    ，这样的话，
    
     
      应用
     
    
    就会在小密度手机上加载
   
   
    mdpi
   
   
    文件中的资源。
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    2.
   
   
    细心的人会发现自
   
   
    android2.0
   
   
    开始之后
   
   
    drawable
   
   
    文件被三个文件夹
   
   
    drawable-hdpi,drawable-mdpi,drawable-ldpi
   
   
    三个文件夹所取代，有些编程人员为了让应用程序默认地加载某些图片，他们会特意地去在
   
   
    android2.0
   
   
    之后的应用程序中重新创建
   
   
    drawable
   
   
    文件夹，其实这样做完全没有必要，通过第一段的分析我们得知，
   
   
    android:anyDensity
   
   
    =
   
   
    
     "false"
    
    
     ，
    
   
   
    则应用会将大小密度转变成中密度，从而去加载
   
   
    mdpi
   
   
    中的资源。这里同样，当
   
   
    android:anyDensity
   
   
    =
   
   
    
     "false"
    
    
     ，
    
   
   
    则应用会去加载
   
   
    mdpi
   
   
    中的资源。
   
  
 
 
  
   
    总结一下：
   
  
 
 
  
   
    第一：
   
   
    android:anyDensity
   
   
    =
   
   
    
     "true"
    
    
     ，
    
   
   
    系统会依据屏幕密度，自动去找对应的文件夹
   
  
 
 
  
   
    第二：
   
   
    android:anyDensity
   
   
    =
   
   
    
     "false",
    
   
  
 
 
  
   
    
     (1)
    
   
   
    如果
   
   
    drawable-hdpi,drawable-mdpi,drawable-ldpi
   
   
    三个文件夹中有同一张图片资源的不同密度表示，那么系统会去加载
   
   
    drawable_mdpi
   
   
    文件夹中的资源
   
  
 
 
  
   
    
     (2)
    
   
   
    如果
   
   
    drawable-hpdi
   
   
    中有高密度图片，其它两个文件夹中没有对应图片资源，那么系统会去加载
   
   
    drawable-hdpi
   
   
    中的资源。
   
  
 
 
  
   
    
     (3)
    
   
   
    如果
   
   
    drawable-hdpi,drawable-mdpi
   
   
    中有图片资源，
   
   
    drawable-ldpi
   
   
    中没有对应的图片资源，那么系统会加载
   
   
    drawable-mdpi
   
   
    文件夹中的资源
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    3.
   
   
    注意上图各种文件夹的不同表示。
   
  
 
 
  
   
    drawable-hdpi
   
   
    该图片即适用于横屏，也适用于竖屏
   
  
 
 
  
   
    drawable-land-hdpi,
   
   
    当屏幕为横屏，且为高密度时，加载此文件夹中的资源
   
  
 
 
  
   
    drawable-port-hdpi,
   
   
    当屏幕为竖屏，且为高密度时，加载此文件夹中的资源
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    3.
   
   
    有时候会根据需要在代码中动态地设置某个值，比如地图，地图的
   
   
    pin
   
   
    和地图的
    
     地址提示框
    
    的相对偏移量在不同密度的手机上是不同的。这时候可以通过以下方法求出屏幕密度：
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    DisplayMetrics metric = new DisplayMetrics();
    
     getWindowManager().getDefaultDisplay().getMetrics(metric);
    
   
  
 
 
  
   
    int densityDpi = metric.densityDpi;
    
     
      //
     
    
   
   
    屏幕密度
   
   
    DPI
   
   
    （
   
   
    120
 / 160 / 240
   
   
    ）
   
  
 
 
  
   
    
     
     
    
   
  
 
 
  
   
    然后可以在代码中为这几种密度分别设置便宜量
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    但是这种方法最好不要使用，最好的方式是在
   
   
    xml
   
   
    文件中不同密度的手机进行分别设置。
   
  
 
 
  
   
    这里地图的偏移量可以在
   
   
    values-hpdi,values-mdpi,values-ldpi
   
   
    三种文件夹中的
   
   
    dimens.xml
   
   
    文件进行设置
   
  
 
 
  
   
    值得一提的是：
   
  
 
 
  
   
    
     
      
      
     
    
   
   
    <
   
   
    dimen
   
   
    
     name
    
    
     =
    
    
     
      "bitmap_common_topoffset"
     
    
    
     >;
    
    
     40dp
    
    
     </
    
    
     dimen
    
    
     >;
    
   
  
 
 
  
   
    
     
      
      
     
    
   
   
    <
   
   
    dimen
   
   
    
     name
    
    
     =
    
    
     
      "bitmap_common_bottomoffset"
     
    
    
     >;
    
    
     -14dp
    
    
     </
    
    
     dimen
    
    
     >;
    
   
  
 
 
  
   
    这里的负数是完全起作用的，系统会认为它是一个负值
   
  
 
 
  
   
    
    
   
  
 
 
  
   
    4. 各大手机厂商对于Android操作系统都有或多或少的改动，当然这些改动会对我们应用程序产生某些影响
   
  
 
 
  
   
    
     比如：
    
   
  
 
 
  
   
    
     
      （1）系统源代码中连接music服务的aidl文件所在包名：com.android.music
      
      
     
    
   
  
 
 
  
   
    
     
      （2）LG则可能将该aidl文件修改所在的包（例如修改为
 com.android.music.player），并且修改其中的文件内容（增加一个方法，或者减少几个方法，或者修改方法名称）
     
    
   
   
    那么我们的应用要想在LG的手机上发布，那么我们就必须改变所要连接的aidl文件,必须跟LG厂商修改的完全一致。
   
  
 


